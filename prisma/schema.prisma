// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// If you want to use Prisma Migrate, you will need to manually create a shadow database
// https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
// make sure to append ?connect_timeout=10 to the connection string

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  role          String    @default("student")
  isVerified    Boolean   @default(false)

  studentProfile StudentProfile?
  facultyProfile FacultyProfile?
  adminProfile   AdminProfile?
  accounts       Account[]
  sessions       Session[]
  invitations    Invitation[]
}

model Invitation {
  id          String    @id @default(cuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expiresAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model StudentProfile {
  id                       String       @id @default(cuid())
  lrnNumber                String       @unique @map("LRN NUMBER (2)")
  sex                      String       @map("SEX (3)")
  age                      Int          @map("AGE (4)")
  lastName                 String       @map("Last Name (5)")
  firstName                String       @map("First Name (6)")
  middleName               String?      @map("Middle Name (7)")
  dateOfBirth              DateTime     @map("DOB (8)")
  gender                   String       @map("SEX M/F (9)")
  genAveJHS                Float        @map("GEN Ave. JHS (10)")
  nameOfJHS                String       @map("Name of JHS (11)")
  address                  String       @map("Address (12)")
  jhsCompleted             Int          @map("SY JHS Completed")
  province                 String?      @map("Place of Birth: Province")
  town                     String?      @map("Place of Birth: Town")
  barangay                 String?      @map("Place of Birth:Barangay")
  parentGuardianName       String?      @map("Parent/Guardian (17)")
  parentGuardianAddress    String?      @map("Address of Parent/ Guardian")
  parentGuardianOccupation String?
  workImmersion            String?
  contactNumber            String?
  enrollment               Enrollment[]
  gradeLevel               GradeLevel?  @relation(fields: [gradeLevelId], references: [id])
  strand                   Strand?      @relation(fields: [strandId], references: [id])
  section                  Section?     @relation(fields: [sectionId], references: [id])
  grades                   Grades[]
  subjects                 Subject[]

  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
  gradeLevelId String?
  strandId     String?
  sectionId    String?
}

model FacultyProfile {
  id            String       @id @default(cuid())
  empNumber     String       @unique
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  section       Section[]
  subjects      Subject[]
  gradeLevel    GradeLevel[]
  grades        Grades[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model AdminProfile {
  id            String   @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model SchoolYear {
  id         String       @id @default(cuid())
  from       DateTime
  to         DateTime
  semester   Int

  grade      Grades[]
  enrollment Enrollment[]
  sections   Section[]
  subjects   Subject[]
}

model Enrollment {
  id             String   @id @default(cuid())
  status         String?
  enrollmentDate DateTime @default(now())

  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  student      StudentProfile? @relation(fields: [studentId], references: [id])
  studentId    String?         @unique
}

model GradeLevel {
  id         String           @id @default(cuid())
  gradeLevel Int              @unique @default(11)
  strands    Strand[]
  sections   Section[]
  faculty    FacultyProfile[]
  student    StudentProfile[]
}

model Strand {
  id         String           @id @default(cuid())
  strandCode String
  strandName String
  sections   Section[]
  subjects   Subject[]
  student    StudentProfile[]

  gradeLevel   GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId String
}

model Section {
  id          String           @id @default(cuid())
  sectionName String           @unique
  room        String?
  faculty     FacultyProfile[]
  student     StudentProfile[]
  grades      Grades[]

  schoolYear   SchoolYear? @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
  gradeLevel   GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId String?
  strand       Strand?     @relation(fields: [strandId], references: [id])
  strandId     String?
}

model Subject {
  id          String           @id @default(cuid())
  subjectName String           @unique
  faculty     FacultyProfile[]
  grades      Grades[]

  schoolYear   SchoolYear?     @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  strand       Strand          @relation(fields: [strandId], references: [id])
  strandId     String
  student      StudentProfile? @relation(fields: [studentId], references: [id])
  studentId    String?
}

model Grades {
  id            String    @id @default(cuid())
  firstQuarter  Decimal?
  secondQuarter Decimal?
  finalGrade    Decimal?
  genAverage    Decimal?
  remarks       String?
  section       Section[]

  student    StudentProfile? @relation(fields: [studentId], references: [id])
  studentId  String?
  faculty    FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId  String?
  subject    Subject         @relation(fields: [subjectId], references: [id])
  subjectId  String
  schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
}

// model PlaceOfBirth {
//   id        Int            @id @default(autoincrement())
//   province  String         @map("Province")
//   town      String         @map("Town")
//   barangay  String         @map("Barangay")
//   student   StudentProfile @relation(fields: [studentId], references: [id])
//   studentId String         @unique
// }

// model ParentGuardian {
//   id         Int            @id @default(autoincrement())
//   name       String         @map("Parent/Guardian (17)")
//   address    String         @map("Address of Parent/ Guardian")
//   occupation String
//   student    StudentProfile @relation(fields: [studentId], references: [id])
//   studentId  String         @unique
// }

// enum Role {
//   STUDENT
//   FACULTY
//   ADMIN
// }

// enum EnrollmentStatus {
//   PENDING
//   ENROLLED
//   DROPPED
//   COMPLETED
//   WITHDRAWN
//   ON_HOLD
//   GRADUATED
// }
