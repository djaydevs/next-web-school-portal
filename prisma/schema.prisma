generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  image          String?
  role           String          @default("student")
  isVerified     Boolean         @default(false)
  accounts       Account[]
  adminProfile   AdminProfile?
  facultyProfile FacultyProfile?
  invitations    Invitation[]
  sessions       Session[]
  studentProfile StudentProfile?
}

model Invitation {
  id          String    @id @default(cuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expiresAt   DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model StudentProfile {
  id                       String      @id @default(cuid())
  contactNumber            String?
  userId                   String?     @unique
  gradeLevelId             String?
  age                      Int         @map("AGE (4)")
  address                  String      @map("Address (12)")
  parentGuardianAddress    String?     @map("Address of Parent/ Guardian")
  dateOfBirth              DateTime    @map("DOB (8)")
  firstName                String      @map("First Name (6)")
  genAveJHS                Float       @map("GEN Ave. JHS (10)")
  lrnNumber                String      @unique @map("LRN NUMBER (2)")
  lastName                 String      @map("Last Name (5)")
  middleName               String?     @map("Middle Name (7)")
  nameOfJHS                String      @map("Name of JHS (11)")
  parentGuardianName       String?     @map("Parent/Guardian (17)")
  province                 String?     @map("Place of Birth: Province")
  town                     String?     @map("Place of Birth: Town")
  barangay                 String?     @map("Place of Birth:Barangay")
  sex                      String      @map("SEX (3)")
  gender                   String      @map("SEX M/F (9)")
  jhsCompleted             Int         @map("SY JHS Completed")
  parentGuardianOccupation String?
  workImmersion            String?
  sectionId                String?
  strandId                 String?
  enrollment               Enrollment?
  grades                   Grades[]
  gradeLevel               GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  section                  Section?    @relation(fields: [sectionId], references: [id])
  strand                   Strand?     @relation(fields: [strandId], references: [id])
  user                     User?       @relation(fields: [userId], references: [id])
  subjects                 Subject[]
}

model FacultyProfile {
  id            String       @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  userId        String?      @unique
  empNumber     String       @unique
  user          User?        @relation(fields: [userId], references: [id])
  grades        Grades[]
  gradeLevel    GradeLevel[] @relation("FacultyProfileToGradeLevel")
  section       Section[]    @relation("FacultyProfileToSection")
  subjects      Subject[]    @relation("FacultyProfileToSubject")
}

model AdminProfile {
  id            String   @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  userId        String?  @unique
  user          User?    @relation(fields: [userId], references: [id])
}

model SchoolYear {
  id         String       @id @default(cuid())
  from       DateTime
  to         DateTime
  enrollment Enrollment[]
  sections   Section[]
  semesters  Semester[]
  subjects   Subject[]
}

model Semester {
  id           String     @id @default(cuid())
  semesterNum  Int
  schoolYearId String
  Grades       Grades[]
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
}

model Enrollment {
  id             String          @id @default(cuid())
  status         String?
  enrollmentDate DateTime        @default(now())
  schoolYearId   String
  studentId      String?         @unique
  schoolYear     SchoolYear      @relation(fields: [schoolYearId], references: [id])
  student        StudentProfile? @relation(fields: [studentId], references: [id])
}

model GradeLevel {
  id         String           @id @default(cuid())
  gradeLevel Int              @unique @default(11)
  sections   Section[]
  strands    Strand[]
  student    StudentProfile[]
  faculty    FacultyProfile[] @relation("FacultyProfileToGradeLevel")
}

model Strand {
  id           String           @id @default(cuid())
  strandCode   String
  strandName   String
  gradeLevelId String
  sections     Section[]
  gradeLevel   GradeLevel       @relation(fields: [gradeLevelId], references: [id])
  student      StudentProfile[]
  subjects     Subject[]
}

model Section {
  id           String           @id @default(cuid())
  sectionName  String           @unique
  room         String?
  gradeLevelId String?
  schoolYearId String?
  strandId     String?
  gradeLevel   GradeLevel?      @relation(fields: [gradeLevelId], references: [id])
  schoolYear   SchoolYear?      @relation(fields: [schoolYearId], references: [id])
  strand       Strand?          @relation(fields: [strandId], references: [id])
  student      StudentProfile[]
  faculty      FacultyProfile[] @relation("FacultyProfileToSection")
  grades       Grades[]         @relation("GradesToSection")
}

model Subject {
  id           String           @id @default(cuid())
  subjectName  String           @unique
  strandId     String
  studentId    String?
  schoolYearId String
  grades       Grades[]
  schoolYear   SchoolYear       @relation(fields: [schoolYearId], references: [id])
  strand       Strand           @relation(fields: [strandId], references: [id])
  student      StudentProfile?  @relation(fields: [studentId], references: [id])
  faculty      FacultyProfile[] @relation("FacultyProfileToSubject")
}

model Grades {
  id            String          @id @default(cuid())
  finalGrade    Decimal?
  studentId     String?
  facultyId     String?
  firstQuarter  Decimal?
  genAverage    Decimal?
  remarks       String?
  secondQuarter Decimal?
  subjectId     String
  semesterId    String?
  faculty       FacultyProfile? @relation(fields: [facultyId], references: [id])
  semester      Semester?       @relation(fields: [semesterId], references: [id])
  student       StudentProfile? @relation(fields: [studentId], references: [id])
  subject       Subject         @relation(fields: [subjectId], references: [id])
  section       Section[]       @relation("GradesToSection")
}
