// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  // hashedPassword String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  role          String    @default("student")
  isVerified    Boolean   @default(false)

  studentProfile    StudentProfile?
  facultyProfile    FacultyProfile?
  adminProfile      AdminProfile?
  accounts          Account[]
  sessions          Session[]
  verificationToken VerificationToken[]
  invitations       Invitation[]
}

model VerificationToken {
  id          String    @id @default(cuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expiresAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([id, token])
}

model Invitation {
  id          String    @id @default(cuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expiresAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model StudentProfile {
  id                    String      @id @default(cuid())
  lrn                   Int         @unique
  lastName              String
  firstName             String
  middleName            String?
  age                   Int
  dateOfBirth           DateTime
  gender                String
  address               String
  contactNumber         String?
  guardianName          String?
  guardianContactNumber String?
  enrollment            Enrollment?
  gradeLevel            GradeLevel?
  strand                Strand?
  section               Section?
  subjects              Subject[]
  grades                Grades[]

  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
  gradeLevelId String?
}

model FacultyProfile {
  id            String    @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  section       Section[]
  subjects      Subject[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model AdminProfile {
  id            String   @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model SchoolYear {
  id        String @id @default(cuid())
  yearStart Int
  yearEnd   Int
  quarter   Int

  enrollment Enrollment[]
}

model Enrollment {
  id             String   @id @default(cuid())
  status         String?
  enrollmentDate DateTime @default(now())

  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  student      StudentProfile? @relation(fields: [studentId], references: [id])
  studentId    String?         @unique
}

model GradeLevel {
  id         String @id @default(cuid())
  gradeLevel Int

  student   StudentProfile @relation(fields: [studentId], references: [id])
  studentId String         @unique
  section   Section?       @relation(fields: [sectionId], references: [id])
  sectionId String?
}

model Strand {
  id         String @id @default(cuid())
  strandCode String
  strandName String

  student   StudentProfile @relation(fields: [studentId], references: [id])
  studentId String         @unique
}

model Section {
  id          String       @id @default(cuid())
  sectionName String
  room        String?
  gradeLevel  GradeLevel[]

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?         @unique
  faculty   FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId String?
}

model Subject {
  id          String @id @default(cuid())
  subjectCode String @unique
  subjectName String

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?
  faculty   FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId String?
}

model Grades {
  id            String   @id @default(cuid())
  firstGrading  Decimal?
  secondGrading Decimal?
  thirdGrading  Decimal?
  fourthGrading Decimal?
  finalGrade    Decimal?

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?
}

// enum Role {
//   STUDENT
//   FACULTY
//   ADMIN
// }

// enum EnrollmentStatus {
//   PENDING
//   ENROLLED
//   DROPPED
//   COMPLETED
//   WITHDRAWN
//   ON_HOLD
//   GRADUATED
// }
