// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  // hashedPassword String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  role          String    @default("student")
  isVerified    Boolean   @default(false)

  studentProfile StudentProfile?
  facultyProfile FacultyProfile?
  adminProfile   AdminProfile?
  accounts       Account[]
  sessions       Session[]
  invitations    Invitation[]
}

model Invitation {
  id          String    @id @default(cuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expiresAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model StudentProfile {
  id             String          @id @default(cuid())
  lrnNumber      String          @unique @map("LRN NUMBER (2)")
  sex            String          @map("SEX (3)")
  age            Int             @map("AGE (4)")
  lastName       String          @map("Last Name (5)")
  firstName      String          @map("First Name (6)")
  middleName     String?         @map("Middle Name (7)")
  dateOfBirth    DateTime        @map("DOB (8)")
  gender         String          @map("SEX M/F (9)")
  genAveJHS      Float           @map("GEN Ave. JHS (10)")
  nameOfJHS      String          @map("Name of JHS (11)")
  address        String          @map("Address (12)")
  jhsCompleted   Int             @map("SY JHS Completed")
  placeOfBirth   PlaceOfBirth?
  parentGuardian ParentGuardian?
  workImmersion  String?
  contactNumber  String?
  enrollment     Enrollment?
  gradeLevel     GradeLevel?
  strand         Strand?
  section        Section?
  subjects       Subject[]
  grades         Grades[]

  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
  gradeLevelId String?
}

model FacultyProfile {
  id            String       @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  section       Section[]
  subjects      Subject[]
  gradeLevel    GradeLevel[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model AdminProfile {
  id            String   @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model SchoolYear {
  id       String   @id @default(cuid())
  from     DateTime
  to       DateTime
  semester Int

  subjects   Subject[]
  enrollment Enrollment[]
}

model Enrollment {
  id             String   @id @default(cuid())
  status         String?
  enrollmentDate DateTime @default(now())

  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  student      StudentProfile? @relation(fields: [studentId], references: [id])
  studentId    String?         @unique
}

model GradeLevel {
  id         String   @id @default(cuid())
  gradeLevel Int
  strand     Strand[]

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?         @unique
  faculty   FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId String?         @unique
}

model Strand {
  id         String       @id @default(cuid())
  strandCode String
  strandName String
  gradeLevel GradeLevel[]
  section    Section[]
  subject    Subject[]

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?         @unique
}

model Section {
  id          String   @id @default(cuid())
  sectionName String
  room        String?
  strand      Strand[]

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?         @unique
  faculty   FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId String?
}

model Subject {
  id          String @id @default(cuid())
  subjectName String

  schoolYear   SchoolYear?     @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  strand       Strand          @relation(fields: [strandId], references: [id])
  strandId     String
  student      StudentProfile? @relation(fields: [studentId], references: [id])
  studentId    String?
  faculty      FacultyProfile? @relation(fields: [facultyId], references: [id])
  facultyId    String?
}

model Grades {
  id            String   @id @default(cuid())
  firstGrading  Decimal?
  secondGrading Decimal?
  thirdGrading  Decimal?
  fourthGrading Decimal?
  finalGrade    Decimal?

  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?
}

model PlaceOfBirth {
  id        Int            @id @default(autoincrement())
  province  String         @map("Province")
  town      String         @map("Town")
  barangay  String         @map("Barangay")
  student   StudentProfile @relation(fields: [studentId], references: [id])
  studentId String         @unique
}

model ParentGuardian {
  id         Int            @id @default(autoincrement())
  name       String         @map("Parent/Guardian (17)")
  address    String         @map("Address of Parent/ Guardian")
  occupation String
  student    StudentProfile @relation(fields: [studentId], references: [id])
  studentId  String         @unique
}

// enum Role {
//   STUDENT
//   FACULTY
//   ADMIN
// }

// enum EnrollmentStatus {
//   PENDING
//   ENROLLED
//   DROPPED
//   COMPLETED
//   WITHDRAWN
//   ON_HOLD
//   GRADUATED
// }
