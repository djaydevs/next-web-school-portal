// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role     @default(STUDENT)

  Student Student[]
  Faculty Faculty[]
  Admin   Admin[]
}

model Student {
  id                    String      @id @default(cuid())
  lrn                   Int         @unique
  lastName              String
  firstName             String
  middleName            String?
  age                   Int
  dateOfBirth           DateTime
  gender                String
  address               String
  contactNumber         String?
  guardianName          String?
  guardianContactNumber String?
  enrollment            Enrollment?
  gradeLevel            GradeLevel?
  strand                Strand?
  section               Section?
  subjects              Subject[]
  grades                Grades[]

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?  @unique
}

model Faculty {
  id            String    @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  section       Section[]
  subjects      Subject[]

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?  @unique
}

model Admin {
  id            String   @id @default(cuid())
  lastName      String
  firstName     String
  middleName    String?
  age           Int
  dateOfBirth   DateTime
  gender        String
  address       String
  contactNumber String?
  account       Account? @relation(fields: [accountId], references: [id])
  accountId     String?  @unique
}

model SchoolYear {
  id        String   @id @default(cuid())
  yearStart DateTime
  yearEnd   DateTime
  term      String
  strand    Strand[]
}

model Strand {
  id         String @id @default(cuid())
  strandCode String
  strandName String

  SchoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  Student      Student    @relation(fields: [studentId], references: [id])
  studentId    String     @unique
}

model GradeLevel {
  id           String @id @default(cuid())
  gradeLevel   Int
  gradeSection String

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique
}

model Enrollment {
  id             String           @id @default(cuid())
  status         EnrollmentStatus @default(PENDING)
  enrollmentDate DateTime         @default(now())

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique
}

model Section {
  id          String @id @default(cuid())
  sectionName String
  room        String

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique
  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?
}

model Subject {
  id          String @id @default(cuid())
  subjectCode String @unique
  subjectName String

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?
}

model Grades {
  id            String   @id @default(cuid())
  firstGrading  Decimal?
  secondGrading Decimal?
  thirdGrading  Decimal?
  fourthGrading Decimal?
  finalGrade    Decimal?

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  DROPPED
  COMPLETED
  WITHDRAWN
  ON_HOLD
  GRADUATED
}
